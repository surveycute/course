День 3.	
Создание объектов. Размещение на стеке и в куче.

память можно условно разделить на три зоны

1. Память под константы.
2. Куча.
3. Стек.

1. Память под константы.

Копилятору не запрещается хранить пересакающиеся данные в одной памяти.
Если определены две константы.
const int users = 100;
const int connections = 100;
Скорее всего они будут указывать на одну и ту же память.

Константы можно только читать. Память констант нам недоступна.

2. Стек.

Предварительно выделенная память небольшого объема(несколько мегабайт), используемая для локальных переменных.
При входе в локальный контекст в стек, по мере выполнения кода, помещаюстя переменные. 
При этом адрес границы стека уменьшается. Стек растет вниз.
Переменная занимает в стеке sizeof байт, поэтому размещение тяжелых локальных объектов в стеке нежелательно.
При исчерпании стека программа не может работать дальше. 
В момент рекурсивного вызова в стек помещаются значения всех переменных вызывающей функции.
Глубина рекурсии прямо пропорциональна размеру стека.
Когда функция завершается, т.е. когда управление покидает локальный контекст, переменные извлекаются из стека.

Для перменных не встроенного типа вызывается деструктор.
Стек не вызывает выделения памяти и потому размещение в нем выполняется очень быстро.

При передаче адреса локальной переменной есть вероятность, что кто-то сохранит этот адрес.

{
Value v;
keep(&v);
}

Впоследствие, это может привести к неопределенному поведению.

Существует атака на переполнение стека, при которой адрес возврата затирается другим адресом, по которому будет передано выполнение, после завершения работы функции.

3. Куча. 

Вся память минус память под константы и стек является кучей, из которую можно использовать под свои нужды.

обычный new
выделяет непрерывный запрашиваемый кусок памяти. Если не может, то бросает исключение std::bad_alloc

new, не бросающий исключений
то же, что и new, но возвращает NULL в случае неудачи.

размещающий new
размещает объект в предварительно выделенной памяти.


delete - уничтожает объект(вызывает деструктор) и возвращает память в кучу.
delete[] - версия для массивов.

malloc - выделяет непрерывный кусок памяти, NULL в случае неудачи.
Память, выделенная malloc может быть использована размещающим new.
void* pa = malloc(sizeof(A));
A* a = new(pa) A();

free
возвращает память системе.

Грабли:

Память остаётся «занятой», даже если ни один указатель в программе на неё не ссылается (для освобождения памяти используется функция free()). 
Накопление «потерянных» участков памяти приводит к постепенной деградации системы. Ошибки, связанные с неосвобождением занятых участков памяти, называются утечками памяти (англ. memory leaks).

Если объём обрабатываемых данных больше, чем объём выделенной памяти, возможно повреждение других областей динамической памяти. Такие ошибки называются ошибками переполнения буфера (англ. buffer overflow).

Если указатель на выделенную область памяти после освобождения продолжает использоваться, то при обращении к «уже не существующему» блоку динамической памяти может произойти исключение (англ. exception), сбой программы, 
повреждение других данных или не произойти ничего (в зависимости от типа операционной системы и используемого аппаратного обеспечения).

Если для одной области памяти free() вызывается более чем один раз, то это может повредить данные самой библиотеки, содержащей malloc/free, и привести к непредсказуемому поведению в произвольные моменты времени.

Неудачная организация программы, в которой выделяется и освобождается множество небольших объёмов памяти — возможна фрагментация свободной памяти («пунктир»), при которой свободной памяти в сумме остаётся много, но выделить большой кусок невозможно.

