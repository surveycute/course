День 2.	
Структуры. Битовые поля. Перечисленния. Объединения. Классы. Управление доступом. Указатель this. inline-функции.
Отношение дружбы. Константные(const), изменяемые(mutable) и статические члены. Виртуальные функции. Абстрактные классы.
Наследование. Множественное и виртуальное наследование. 
Полиморфизм. Приведение типов. RTTI.

___________________________________________________________________________

Существует ряд способов создания новых (составных, сложных) типов данных:
1) структура;
2) объединение;
3) перечисление;
4) класс.
-) typedef - синонимы;

(1) Структура (struct) --- последовательность полей других типов.

struct <имя структуры> {
	<тип 1> <имя поля 1>;
	<тип 2> <имя поля 2>;
	...
};


Битовое поле -— число, занимающее некоторый набор битов, напрямую не адресуемый процессором.
Например: при 8-битном байте первые два поля протокола IP — версия и IHL — будут битовыми полями. На машинах с 32-битным байтом все поля IP-пакета (кроме IP-адресов отправителя и получателя) будут битовыми.

Замечание.
Обращение к битовым полям требует дополнительных команд процессора для маскирования и сдвига, и потому медленнее обращений к словам/байтам. Поэтому битовые поля применяются для максимально полной упаковки информации в местах, где неважна скорость доступа к информации.

Замечание.
Компиляторы, как правило, ограничивают работу с битовыми полями только извлечением значения битового поля и записью значения в битовое поле, а само битовое поле воспринимается как беззнаковое число. Реальный порядок следования битовых полей в структуре является системно-зависимым: в одних компиляторах битовые поля могут быть расположены начиная с младших битов, а в других — со старших.

2) Объединение (union) --- совокупность полей, размещённых по одному адресу.
3) Перечисление (enum) --- целочисленный тип, различные значения которого именованы.


(4) Классы.

Класс --- __описание__ 1) данных, которые должен содержать объект этого класса, 2) операций, применимых к объекту этого класса, и 3) правил взаимодействия с другими объектами этого класса, а также с объектами других классов.
Объект --- __набор_данных__, обрабатываемых по правилам, описанным в определениях классов, которым он принадлежит.

Определение класса определяет новый тип, а именно устанавливает семантическую связь, содержащихся в объекте данного класса, и кода (функций и операторов), применимого к этим данным. Т.о. класс является понятием логическим, объект же
имеет физическую природу. В общем, объект есть экземпляр класса.

Замечание. Структура является частным случаем класса, состоящего лишь из одних свойств.
