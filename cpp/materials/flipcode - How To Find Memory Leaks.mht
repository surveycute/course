Content-Type: multipart/related; start=<op.mhtml.1299622534200.d594e8645322a71c@192.168.1.3>; boundary=----------YjczpzKGc6gqRXEn2kKvZi
Content-Location: http://www.flipcode.com/archives/How_To_Find_Memory_Leaks.shtml
Subject: =?utf-8?Q?flipcode=20-=20How=20To=20Find=20Memory=20Leaks?=
MIME-Version: 1.0

------------YjczpzKGc6gqRXEn2kKvZi
Content-Disposition: inline; filename=How_To_Find_Memory_Leaks.shtml
Content-Type: text/html; charset=UTF-8; name=How_To_Find_Memory_Leaks.shtml
Content-ID: <op.mhtml.1299622534200.d594e8645322a71c@192.168.1.3>
Content-Location: http://www.flipcode.com/archives/How_To_Find_Memory_Leaks.shtml
Content-Transfer-Encoding: 8bit

<html>
<head><title>flipcode - How To Find Memory Leaks</title>
<style type="text/css">


a.menulink:link    {color: #b9ffd0; }
a.menulink:visited {color: #b9ffd0; }
a.menulink:active  {color: #b9ffd0; }

a.menulinkempty:link    {color: #b9ffd0; }
a.menulinkempty:visited {color: #b9ffd0; }
a.menulinkempty:active  {color: #b9ffd0; }
a.menulinkempty:link, a.menulinkempty:visited, a.menulinkempty:active {text-decoration: none}

a.orangelink:link    { color:#FFAB04; }
a.orangelink:visited { color:#FFAB04; }
a.orangelink:active  { color:#FFAB04; }

a.palegreen:link    {color: #b9ffd0; }
a.palegreen:visited {color: #b9ffd0; }
a.palegreen:active  {color: #b9ffd0; }

a.bluelink:link    { color:#03F0FF; }
a.bluelink:visited { color:#03F0FF; }
a.bluelink:active  { color:#03F0FF; }

a.softyellow:link     { color:#FFFCA9; }
a.softyellow:visited  { color:#FFFCA9; }
a.softyellow:active   { color:#FFFCA9; }

a.nounderline:link        {color: #FFFCA9; }
a.nounderline:visited     {color: #FFFCA9; }
a.nounderline:active      {color: #FFFCA9; }
a.nounderline:link, a.nounderline:visited, a.nounderline:active {text-decoration: none}

<!--
#code_comment { font-family:Courier,Courier New; font-size:12px; color:#007f00; }
#code_text    { font-family:Courier,Courier New; font-size:12px; color:#000000; }
#code_keyword { font-family:Courier,Courier New; font-size:12px; color:#0000FF; }
-->

</style>
</head>
<body bgcolor="#000000" text="#ffffff" link="#FFFCA9" vlink="#FFFCA9" alink="#FFFCA9">
<center>
<script type="text/javascript"><!--
google_ad_client = "pub-3512250068614659";
//728x90, created 1/8/08
google_ad_slot = "8394943283";
google_ad_width = 728;
google_ad_height = 90;
//--></script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
<br>

<br><center><table cellspacing=0 cellpadding=2 border=0 width="80%"><tr><td background="comments_bar2.jpg" bgcolor="#333333" width="100" valign="center"><font size=1>&nbsp;</font></td></tr></table></center><br>
<center>
<table width="80%" cellspacing=0 cellpadding=0 border=0>
<tr>
<td>
<font size=3 face="Verdana, Helvetica" color="#ffffff"><b>How To Find Memory Leaks</b><br>
<font size=2>by <!--GO AWAY SPAM!!!--><script language="javascript">document.write('<a href=\"mailto:' + ''    
+''    
+''    
+''    
+''    
+''    
+ '' + '' + ''    
+''    
+ 'dpicco' + ''    
+''    
+''    
+''    
+''    
+''    
+''    
+ '@' + 'cs' + ''    
+''    
+''    
+ '.' + ''    
+''    
+''    
+''    
+''    
+''    
+''    
+''    
+ 'mun.ca\">' + 'Dion Picco' + '</a>')</script> (23 May 2000)</font>
</font>
<br><br><br>
</td>
<td align="right" valign="top"><font face="Verdana, Helvetica" size=2><a href="articles.shtml">Return to The Archives</a>
</td>
</tr></table>
</center><center>
<table style="table-layout:fixed;" width="80%" cellspacing=0 cellpadding=0 border=0>
<tr>
<td width="100%">
<font size=3 color="#ffffff" face="Verdana, Helvetica, Arial, Times New Roman"><b>

Introduction
<font size=1><br><img src="line_grey.png"><br><br></font></b></font></td></tr></table>
</center>
<center>
<table style="table-layout:fixed;" width="80%" cellspacing=0 cellpadding=0 border=0>
<tr>
<td width="100%">
<font size=2 color="#FFE291" face="Verdana, Helvetica, Arial, Times New Roman">

I was recently working on a rather large project, the largest I had ever been
involved with.  We didn't have a concrete design document on this project so
ideas and implementations were constantly changing.  This is a great flexibility
from a design/creation standpoint, but from a programming perspective it ended
up becoming a rather large mess.  Deep into the project we realized that with
release date approaching we should tackle the task of cleaning up the garbage
code and stabilizing it for alpha testing.   Being a small company however meant
that programs like BoundsChecker© from NuMega were just not within our reach. 
So we had to improvise.  We needed a drop in solution to our current code base
(the code base was entirely C++).  We didn't want a project specific fix
however.  We needed a simple solution that could easily be compiled into this
project and any other.  Then at the end of runtime it would generate a list of
the un-freed memory blocks.  Well, of course we found it, otherwise this article
would not be. We'll be right back after these messages to bring you the
solution!<br><br>	We're back.  Let me elaborate more on exactly what we needed in our
"memory tracer".  We first needed something that could be added to any existing
code base.  Code reuse is a very important consideration, especially to a
company.  It can potentially save hundreds of hours and thousands of dollars. 
Secondly, our solution had to be simple.  We didn't have time nor the courage to
wade through thousands of lines of code doing re-writes and fixes to accommodate
our memory tracer.  And finally, it had to be free. <br><br>	So we took a look at our code.  The first thing we noticed is that
nearly all of our memory allocations were accomplished through the operator new
and variants.  And likewise the de-allocations were accomplished through delete
and variants.  Well, we could replace all occurrences of new and delete with
proprietary functions that tracked our memory for us?  No!  Too many
replacements!  C++ allows you to override new and delete in your classes.  That
would be great news if it didn't mean adding these overrides to all our classes. 
Wait a minute... I can override the global new and delete operators!!!  Now I can
do whatever just before each memory allocation and de-allocation!  This great
news!  Sort of.  I had actually known about this in a roundabout way.  You see,
MFC also has this ability.  It is exploited through some of the _Crt()
functions.  Now that we have our back door, all we need to do is to track the
allocations and cross-reference them with the de-allocations at destruction
time.  What doesn't get referenced is a leak.  Simple.<br><br>	Lets get to the workings of it shall we.  All my work and references are
written using Visual C++.  It should be trivial to convert to other vendors. 
The first thing to do is to override new and delete so that they will be
overridden everywhere in the program.  In stdafx.h, I add:<br><br><center><div style="width:100%; overflow:auto; background-color:#FFFFFF; border:solid 1px #c0c0c0;"><table width="100%" bgcolor="#ffffff" cellspacing=0 cellpadding=12 border=0><tr><td width="100%" bgcolor="#ffffff"><pre><font face="Courier, Courier New" color="#000000">
      <font color="#0000ff">#ifdef</font> _DEBUG
      <font color="#0000ff">inline</font> <font color="#0000ff">void</font> * __cdecl <font color="#0000ff">operator</font> <font color="#0000ff">new</font>(<font color="#0000ff">unsigned</font> <font color="#0000ff">int</font> size, 
                                         <font color="#0000ff">const</font> <font color="#0000ff">char</font> *file, <font color="#0000ff">int</font> line)
      {
      };<br><br>      <font color="#0000ff">inline</font> <font color="#0000ff">void</font> __cdecl <font color="#0000ff">operator</font> <font color="#0000ff">delete</font>(<font color="#0000ff">void</font> *p)
      {
      };
      <font color="#0000ff">#endif</font>
 </font></pre></td></tr></table></div></center><br><br>These are my overridden functions.  And by encasing them with #ifdef/#endif
quotes, I don't get sub-par code with Release builds.  When you look at the code
you'll notice that new has been overridden with three parameters.  These are the
size of the requested allocation as well as the file and line from the source
file where the allocation takes place.  This is necessary in finding where the
leaks are.  Otherwise they would take a lot of assembly digging to find.  By
adding this however, all our code base that calls new() still refers to the
operator new function that accepts one parameter, and not our three parameter
new function.  In addition, we wouldn't want to recode all our new operator
statements to include the __FILE__ and __LINE__ arguments.  What we need to do
is to automatically make the one-parameter new operator call a three-parameter
new operator call.  This can be accomplished with some macro trickery.<br><br><center><div style="width:100%; overflow:auto; background-color:#FFFFFF; border:solid 1px #c0c0c0;"><table width="100%" bgcolor="#ffffff" cellspacing=0 cellpadding=12 border=0><tr><td width="100%" bgcolor="#ffffff"><pre><font face="Courier, Courier New" color="#000000">
      <font color="#0000ff">#ifdef</font> _DEBUG
      <font color="#0000ff">#define</font> DEBUG_NEW <font color="#0000ff">new</font>(__FILE__, __LINE__)
      <font color="#0000ff">#else</font>
      <font color="#0000ff">#define</font> DEBUG_NEW <font color="#0000ff">new</font>
      <font color="#0000ff">#endif</font>
      <font color="#0000ff">#define</font> <font color="#0000ff">new</font> DEBUG_NEW
 </font></pre></td></tr></table></div></center><br><br>Now all of our one-parameter new operator calls are three parameter new calls
with the __FILE__ and __LINE__ automatically inserted by the pre-compiler.  Now
is time for the actual tracking.  We should also add the memory routines to our
overridden functions so that they at least do what the old new/delete operator
functions did.<br><br><center><div style="width:100%; overflow:auto; background-color:#FFFFFF; border:solid 1px #c0c0c0;"><table width="100%" bgcolor="#ffffff" cellspacing=0 cellpadding=12 border=0><tr><td width="100%" bgcolor="#ffffff"><pre><font face="Courier, Courier New" color="#000000">
      <font color="#0000ff">#ifdef</font> _DEBUG
      <font color="#0000ff">inline</font> <font color="#0000ff">void</font> * __cdecl <font color="#0000ff">operator</font> <font color="#0000ff">new</font>(<font color="#0000ff">unsigned</font> <font color="#0000ff">int</font> size,
                                         <font color="#0000ff">const</font> <font color="#0000ff">char</font> *file, <font color="#0000ff">int</font> line)
      {
	      <font color="#0000ff">void</font> *ptr = (<font color="#0000ff">void</font> *)malloc(size);
	      AddTrack((DWORD)ptr, size, file, line);
	      <font color="#0000ff">return</font>(ptr);
      };
      <font color="#0000ff">inline</font> <font color="#0000ff">void</font> __cdecl <font color="#0000ff">operator</font> <font color="#0000ff">delete</font>(<font color="#0000ff">void</font> *p)
      {
	      RemoveTrack((DWORD)p);
	      free(p);
      };
      <font color="#0000ff">#endif</font>
 </font></pre></td></tr></table></div></center><br><br>In addition to these, you may also need to override the new[] and
delete[] operators as well.  They are the same so I just left them out to save space.<br><br>Finally we need to supply some code the tracking functions AddTrack() and
RemoveTrack().  I use the STL to maintain my linked list of allocations.  You
can use whatever.  They two functions can contain any code you wish and then
some.  But I'll provide you with my version just in case you have coders block. <br><br><center><div style="width:100%; overflow:auto; background-color:#FFFFFF; border:solid 1px #c0c0c0;"><table width="100%" bgcolor="#ffffff" cellspacing=0 cellpadding=12 border=0><tr><td width="100%" bgcolor="#ffffff"><pre><font face="Courier, Courier New" color="#000000">
      <font color="#0000ff">typedef</font> <font color="#0000ff">struct</font> {
	      DWORD	address;
	      DWORD	size;
	      <font color="#0000ff">char</font>	file[64];
	      DWORD	line;
      } ALLOC_INFO;<br><br>      <font color="#0000ff">typedef</font> list&lt;ALLOC_INFO*> AllocList;<br><br>      AllocList *allocList;<br><br>      <font color="#0000ff">void</font> AddTrack(DWORD addr,  DWORD asize,  <font color="#0000ff">const</font> <font color="#0000ff">char</font> *fname, DWORD lnum)
      {
	      ALLOC_INFO *info;<br><br>	      <font color="#0000ff">if</font>(!allocList) {
		      allocList = <font color="#0000ff">new</font>(AllocList);
	      }<br><br>	      info = <font color="#0000ff">new</font>(ALLOC_INFO);
	      info->address = addr;
	      strncpy(info->file, fname, 63);
	      info->line = lnum;
	      info->size = asize;
	      allocList->insert(allocList->begin(), info);
      };<br><br>      <font color="#0000ff">void</font> RemoveTrack(DWORD addr)
      {
	      AllocList::iterator i;<br><br>	      <font color="#0000ff">if</font>(!allocList)
		      <font color="#0000ff">return</font>;
	      <font color="#0000ff">for</font>(i = allocList->begin(); i != allocList->end(); i++)
	      {
		      <font color="#0000ff">if</font>((*i)->address == addr)
		      {
			      allocList->remove((*i));
			      <font color="#0000ff">break</font>;
		      }
	      }
      };
 </font></pre></td></tr></table></div></center><br><br>Now, at the very last moment before our program exits, allocList is a list of
all memory allocations that have not been freed.  But in order to see what and
where they are, you need to dump the information stored within allocList.  I use
the output window in Visual C++ for this.  You can format this information in
any way but what I've provided just dumps the list of information.  Note that
using the debug output window of Visual C++ may result in some lines of text not
getting outputted before it cuts off.<br><br><center><div style="width:100%; overflow:auto; background-color:#FFFFFF; border:solid 1px #c0c0c0;"><table width="100%" bgcolor="#ffffff" cellspacing=0 cellpadding=12 border=0><tr><td width="100%" bgcolor="#ffffff"><pre><font face="Courier, Courier New" color="#000000">
      <font color="#0000ff">void</font> DumpUnfreed()
      {
	      AllocList::iterator i;
	      DWORD totalSize = 0;
	      <font color="#0000ff">char</font> buf[1024];<br><br>	      <font color="#0000ff">if</font>(!allocList)
		      <font color="#0000ff">return</font>;<br><br>	      <font color="#0000ff">for</font>(i = allocList->begin(); i != allocList->end(); i++) {
		      sprintf(buf, "%-50s:\t\tLINE %d,\t\tADDRESS %d\t%d unfreed\n",
			      (*i)->file, (*i)->line, (*i)->address, (*i)->size);
		      OutputDebugString(buf);
		      totalSize += (*i)->size;
	      }
	      sprintf(buf, "-----------------------------------------------------------\n");
	      OutputDebugString(buf);
	      sprintf(buf, "Total Unfreed: %d bytes\n", totalSize);
	      OutputDebugString(buf);
      };
 </font></pre></td></tr></table></div></center><br><br>There you have it.  A bit of reusable code that you can use in all your projects
to track all your memory leaks.  I always add these functions to every project I
start working on and I've used them to clean up projects already completed.  It
may not help make your game look the best, but it will hopefully help stabilize
it.  Take care everyone and send me any and all comments. </font></td></tr></table>
</center><center>
<table width="80%" cellspacing=0 cellpadding=0 border=0>
<tr>
<td>
<font size=2 face="Verdana" color="#ffffff">
<br>


</font>
</td>
</tr>
</table>
</center>
<center><table cellspacing=0 cellpadding=2 border=0 width="80%"><tr><td background="comments_bar2.jpg" bgcolor="#333333" width="100" valign="center"><font size=1>&nbsp;</font></td></tr></table></center><br>
<center><font face="Arial, Helvetica" size=1><font face="Helvetica,Tahoma,Verdana" size=1>Copyright 1999-2008 (C) FLIPCODE.COM and/or the original content author(s).  All rights reserved.</font> <center><font face="Helvetica,Tahoma,Verdana" size=1>Please read our <a href="terms.shtml">Terms</a>, <a href="terms.shtml">Conditions</a>, and <a href="terms.shtml">Privacy information</a>.</font></center></font></center>
<br>
</body>
</html>


------------YjczpzKGc6gqRXEn2kKvZi
Content-Disposition: inline; filename=show_ads.js
Content-Type: text/javascript; charset=UTF-8; name=show_ads.js
Content-Location: http://pagead2.googlesyndication.com/pagead/show_ads.js
Content-Transfer-Encoding: Quoted-Printable


(function(){var g=3Dtrue,h=3Dnull,i=3Dfalse,j=3D(new Date).getTime();var=
 k=3Dthis,aa=3Dfunction(a,b,c){a=3Da.split(".");c=3Dc||k;!(a[0]in c)&&c.=
execScript&&c.execScript("var "+a[0]);for(var d;a.length&&(d=3Da.shift()=
);)if(!a.length&&b!=3D=3Dundefined)c[d]=3Db;else c=3Dc[d]?c[d]:c[d]=3D{}=
},ba=3Dfunction(a){return a.call.apply(a.bind,arguments)},ca=3Dfunction(=
a,b){var c=3Db||k;if(arguments.length>2){var d=3DArray.prototype.slice.c=
all(arguments,2);return function(){var f=3DArray.prototype.slice.call(ar=
guments);Array.prototype.unshift.apply(f,d);return a.apply(c,f)}}else re=
turn function(){return a.apply(c,
arguments)}},l=3Dfunction(){l=3DFunction.prototype.bind&&Function.protot=
ype.bind.toString().indexOf("native code")!=3D-1?ba:ca;return l.apply(h,=
arguments)};var da=3D/&/g,ea=3D/</g,fa=3D/>/g,ga=3D/\"/g,m=3D{"\u0000":"=
\\0","\u0008":"\\b","\u000c":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\u0=
00b":"\\x0B",'"':'\\"',"\\":"\\\\"},p=3D{"'":"\\'"},t=3Dfunction(a,b){if=
(a<b)return-1;else if(a>b)return 1;return 0};var u,v,w,z,B=3Dfunction(){=
return k.navigator?k.navigator.userAgent:h};z=3Dw=3Dv=3Du=3Di;var C;if(C=
=3DB()){var ha=3Dk.navigator;u=3DC.indexOf("Opera")=3D=3D0;v=3D!u&&C.ind=
exOf("MSIE")!=3D-1;w=3D!u&&C.indexOf("WebKit")!=3D-1;z=3D!u&&!w&&ha.prod=
uct=3D=3D"Gecko"}var D=3Dv,F=3Dz,ja=3Dw,G;
a:{var H=3D"",I;if(u&&k.opera){var J=3Dk.opera.version;H=3Dtypeof J=3D=3D=
"function"?J():J}else{if(F)I=3D/rv\:([^\);]+)(\)|;)/;else if(D)I=3D/MSIE=
\s+([^\);]+)(\)|;)/;else if(ja)I=3D/WebKit\/(\S+)/;if(I){var ka=3DI.exec=
(B());H=3Dka?ka[1]:""}}if(D){var K,la=3Dk.document;K=3Dla?la.documentMod=
e:undefined;if(K>parseFloat(H)){G=3DString(K);break a}}G=3DH}
var ma=3DG,na=3D{},L=3Dfunction(a){var b;if(!(b=3Dna[a])){b=3D0;for(var =
c=3DString(ma).replace(/^[\s\xa0]+|[\s\xa0]+$/g,"").split("."),d=3DStrin=
g(a).replace(/^[\s\xa0]+|[\s\xa0]+$/g,"").split("."),f=3DMath.max(c.leng=
th,d.length),e=3D0;b=3D=3D0&&e<f;e++){var ta=3Dc[e]||"",s=3Dd[e]||"",n=3D=
RegExp("(\\d*)(\\D*)","g"),A=3DRegExp("(\\d*)(\\D*)","g");do{var q=3Dn.e=
xec(ta)||["","",""],o=3DA.exec(s)||["","",""];if(q[0].length=3D=3D0&&o[0=
].length=3D=3D0)break;b=3Dt(q[1].length=3D=3D0?0:parseInt(q[1],10),o[1].=
length=3D=3D0?0:parseInt(o[1],10))||t(q[2].length=3D=3D
0,o[2].length=3D=3D0)||t(q[2],o[2])}while(b=3D=3D0)}b=3Dna[a]=3Db>=3D0}r=
eturn b};var M,N;N=3DM=3Di;var O=3DB();if(O)if(O.indexOf("Firefox")!=3D-=
1)M=3Dg;else if(O.indexOf("Camino")=3D=3D-1)if(!(O.indexOf("iPhone")!=3D=
-1||O.indexOf("iPod")!=3D-1))if(O.indexOf("iPad")=3D=3D-1)if(O.indexOf("=
Android")=3D=3D-1)if(O.indexOf("Chrome")!=3D-1)N=3Dg;var oa=3DM,pa=3DN;v=
ar qa=3Ddocument,P=3Dwindow;var Q=3Dfunction(a){a=3DparseFloat(a);return=
 isNaN(a)||a>1||a<0?0:a},ra=3Dfunction(a){if(a=3D=3D"true")return g;retu=
rn i},sa=3D/^([\w-]+\.)*([\w-]{2,})(\:[0-9]+)?$/,ua=3Dfunction(a){if(!a)=
return"pagead2.googlesyndication.com";return(a=3Da.match(sa))?a[0]:"page=
ad2.googlesyndication.com"};var va=3DQ("0"),wa=3DQ("0"),xa=3DQ("0"),ya=3D=
Q("0.2");var za=3Dra("false"),Aa=3Dra("false"),Ba=3Dra("false");var Ca=3D=
function(){return ua("")};!D||L("9");!F&&!D||D&&L("9")||F&&L("1.9.1");D&=
&L("9");ua("");var R=3Dfunction(a){return!!a&&typeof a=3D=3D"function"&&=
!!a.call},Da=3Dfunction(a){if(!(arguments.length<2))for(var b=3D1,c=3Dar=
guments.length;b<c;++b)a.push(arguments[b])};function S(a){return typeof=
 encodeURIComponent=3D=3D"function"?encodeURIComponent(a):escape(a)}func=
tion Ea(a,b){if(a.attachEvent)a.attachEvent("onload",b);else a.addEventL=
istener&&a.addEventListener("load",b,i)}
function Fa(a,b){if(!(Math.random()<1.0E-4)){var c=3DMath.random();if(c<=
b)return a[Math.floor(c/b*a.length)]}return""};aa("google_protectAndRun"=
,function(a,b,c){a=3Dl(b,k,a);b=3Dwindow.onerror;window.onerror=3Da;try{=
c()}catch(d){c=3Dd.toString();var f=3D"";if(d.fileName)f=3Dd.fileName;va=
r e=3D-1;if(d.lineNumber)e=3Dd.lineNumber;if(!a(c,f,e))throw d;}window.o=
nerror=3Db},void 0);
aa("google_handleError",function(a,b,c,d){if(Math.random()<0.01){a=3D["h=
ttp://",Ca(),"/pagead/gen_204","?id=3Djserror","&jscb=3D",za?1:0,"&jscd=3D=
",Aa?1:0,"&context=3D",S(a),"&msg=3D",S(b),"&file=3D",S(c),"&line=3D",S(=
d.toString()),"&url=3D",S(qa.URL.substring(0,512)),"&ref=3D",S(qa.referr=
er.substring(0,512))];a.push(["&client=3D",S(P.google_ad_client),"&forma=
t=3D",S(P.google_ad_format),"&slotname=3D",S(P.google_ad_slot),"&output=3D=
",S(P.google_ad_output),"&ad_type=3D",S(P.google_ad_type)].join(""));a=3D=
a.join("");P.google_image_requests||
(P.google_image_requests=3D[]);b=3Dnew Image;b.src=3Da;P.google_image_re=
quests.push(b)}return!Ba},void 0);var Ha=3Dfunction(a){try{var b=3Da.goo=
gle_test;a.google_test=3D!b;if(a.google_test=3D=3D=3D!b){a.google_test=3D=
b;return g}}catch(c){}return i},Ia=3Dh,Ja=3Dfunction(){if(!Ia){for(var a=
=3Dwindow;a!=3Da.parent&&Ha(a.parent);)a=3Da.parent;Ia=3Da}return Ia};va=
r T,U=3Dfunction(a){this.d=3D[];this.b=3Da||window;this.a=3D0;this.c=3Dh=
},Ka=3Dfunction(a,b){this.j=3Da;this.o=3Db};U.prototype.i=3Dfunction(a,b=
){if(this.a=3D=3D0&&this.d.length=3D=3D0&&(!b||b=3D=3Dwindow)){this.a=3D=
2;this.h(new Ka(a,window))}else this.f(a,b)};U.prototype.f=3Dfunction(a,=
b){this.d.push(new Ka(a,b||this.b));La(this)};U.prototype.k=3Dfunction(a=
){this.a=3D1;if(a)this.c=3Dthis.b.setTimeout(l(this.g,this),a)};U.protot=
ype.g=3Dfunction(){if(this.a=3D=3D1){if(this.c!=3Dh){this.b.clearTimeout=
(this.c);this.c=3Dh}this.a=3D0}La(this)};
U.prototype.m=3Dfunction(){return g};U.prototype.nq=3DU.prototype.i;U.pr=
ototype.nqa=3DU.prototype.f;U.prototype.al=3DU.prototype.k;U.prototype.r=
l=3DU.prototype.g;U.prototype.sz=3DU.prototype.m;var La=3Dfunction(a){a.=
b.setTimeout(l(a.n,a),0)};U.prototype.n=3Dfunction(){if(this.a=3D=3D0&&t=
his.d.length){var a=3Dthis.d.shift();this.a=3D2;a.o.setTimeout(l(this.h,=
this,a),0);La(this)}};U.prototype.h=3Dfunction(a){this.a=3D0;a.j()};
var Ma=3Dfunction(a){try{return a.sz()}catch(b){return i}},Na=3Dfunction=
(a){return!!a&&(typeof a=3D=3D"object"||typeof a=3D=3D"function")&&Ma(a)=
&&R(a.nq)&&R(a.nqa)&&R(a.al)&&R(a.rl)},Oa=3Dfunction(){if(T&&Ma(T))retur=
n T;var a=3DJa(),b=3Da.google_jobrunner;if(Na(b))return T=3Db;return a.g=
oogle_jobrunner=3DT=3Dnew U(a)},Pa=3Dfunction(a,b){Oa().nq(a,b)},Qa=3Dfu=
nction(a,b){Oa().nqa(a,b)};var Ra=3Dfunction(a,b,c){var d=3D["<iframe"],=
f;for(f in a)a.hasOwnProperty(f)&&Da(d,f+"=3D"+a[f]);d.push('style=3D"le=
ft:0;position:absolute;top:0;"');d.push("></iframe>");b=3D"border:none;h=
eight:"+c+"px;margin:0;padding:0;position:relative;visibility:visible;wi=
dth:"+b+"px";return['<ins style=3D"display:inline-table;',b,'"><ins id=3D=
"',a.id+"_anchor",'" style=3D"display:block;',b,'">',d.join(" "),"</ins>=
</ins>"].join("")};var Sa=3Dfunction(){},Ua=3Dfunction(a,b,c){switch(typ=
eof b){case "string":Ta(a,b,c);break;case "number":c.push(isFinite(b)&&!=
isNaN(b)?b:"null");break;case "boolean":c.push(b);break;case "undefined"=
:c.push("null");break;case "object":if(b=3D=3Dh){c.push("null");break}if=
(b instanceof Array){var d=3Db.length;c.push("[");for(var f=3D"",e=3D0;e=
<d;e++){c.push(f);Ua(a,b[e],c);f=3D","}c.push("]");break}c.push("{");d=3D=
"";for(f in b)if(b.hasOwnProperty(f)){e=3Db[f];if(typeof e!=3D"function"=
){c.push(d);Ta(a,f,c);c.push(":");Ua(a,
e,c);d=3D","}}c.push("}");break;case "function":break;default:throw Erro=
r("Unknown type: "+typeof b);}},Va=3D{'"':'\\"',"\\":"\\\\","/":"\\/","\=
u0008":"\\b","\u000c":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\u000b":"\=
\u000b"},Wa=3D/\uffff/.test("\uffff")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\=
\"\x00-\x1f\x7f-\xff]/g,Ta=3Dfunction(a,b,c){c.push('"');c.push(b.replac=
e(Wa,function(d){if(d in Va)return Va[d];var f=3Dd.charCodeAt(0),e=3D"\\=
u";if(f<16)e+=3D"000";else if(f<256)e+=3D"00";else if(f<4096)e+=3D"0";re=
turn Va[d]=3De+f.toString(16)}));
c.push('"')};var V=3D["google_ad_block","google_ad_channel","google_ad_c=
lient","google_ad_format","google_ad_height","google_ad_host","google_ad=
_host_channel","google_ad_host_tier_id","google_ad_output","google_ad_ov=
erride","google_ad_region","google_ad_section","google_ad_slot","google_=
ad_type","google_ad_width","google_adtest","google_allow_expandable_ads"=
,"google_alternate_ad_url","google_alternate_color","google_analytics_do=
main_name","google_analytics_uacct","google_bid","google_city","google_c=
olor_bg","google_color_border",
"google_color_line","google_color_link","google_color_text","google_colo=
r_url","google_container_id","google_contents","google_country","google_=
cpm","google_ctr_threshold","google_cust_age","google_cust_ch","google_c=
ust_gender","google_cust_id","google_cust_interests","google_cust_job","=
google_cust_l","google_cust_lh","google_cust_u_url","google_disable_vide=
o_autoplay","google_ed","google_eids","google_enable_osd","google_encodi=
ng","google_font_face","google_font_size","google_frame_id","google_gl",=

"google_hints","google_image_size","google_kw","google_kw_type","google_=
language","google_max_num_ads","google_max_radlink_len","google_num_radl=
inks","google_num_radlinks_per_unit","google_num_slots_to_rotate","googl=
e_only_ads_with_video","google_only_pyv_ads","google_only_userchoice_ads=
","google_override_format","google_page_url","google_referrer_url","goog=
le_region","google_reuse_colors","google_rl_dest_url","google_rl_filteri=
ng","google_rl_mode","google_rt","google_safe","google_skip","google_tag=
_info",
"google_targeting","google_ui_features","google_ui_version","google_vide=
o_doc_id","google_video_product_type","google_with_pyv_ads"];var Xa=3Dfu=
nction(a){this.b=3Da;a.google_iframe_oncopy||(a.google_iframe_oncopy=3D{=
handlers:{},log:[],img:Math.random()<0.01?[]:h});this.e=3Da.google_ifram=
e_oncopy;a.setTimeout(l(this.l,this),3E4)},Ya;var W=3D"var i=3Dthis.id,s=
=3Dwindow.google_iframe_oncopy,H=3Ds&&s.handlers,h=3DH&&H[i],w=3Dthis.co=
ntentWindow,d;try{d=3Dw.document}catch(e){}if(h&&d&&(!d.body||!d.body.fi=
rstChild)){if(h.call){i+=3D'.call';setTimeout(h,0)}else if(h.match){i+=3D=
'.nav';w.location.replace(h)}s.log&&s.log.push(i)}";
if(/[&<>\"]/.test(W)){if(W.indexOf("&")!=3D-1)W=3DW.replace(da,"&amp;");=
if(W.indexOf("<")!=3D-1)W=3DW.replace(ea,"&lt;");if(W.indexOf(">")!=3D-1=
)W=3DW.replace(fa,"&gt;");if(W.indexOf('"')!=3D-1)W=3DW.replace(ga,"&quo=
t;")}Ya=3DW;Xa.prototype.set=3Dfunction(a,b){this.e.handlers[a]=3Db};
Xa.prototype.l=3Dfunction(){if(this.e.img){var a=3Dthis.e.log,b=3Dthis.b=
.document;if(a.length){b=3D["http://",Ca(),"/pagead/gen_204?id=3Diframec=
opy&log=3D",S(a.join("-")),"&url=3D",S(b.URL.substring(0,512)),"&ref=3D"=
,S(b.referrer.substring(0,512))].join("");a.length=3D0;a=3Dnew Image;thi=
s.e.img.push(a);a.src=3Db}}};var Za=3Dfunction(){var a=3D"script";return=
["<",a,' src=3D"http://',ua(""),'/pagead/js/r20101117/r20110307/show_ads=
_impl.js"></',a,">"].join("")},$a=3Dfunction(a,b,c,d){return function(){=
var f=3Di;d&&Oa().al(3E4);try{var e;try{e=3D!!a.document.getElementById(=
b).contentWindow.document}catch(ta){e=3Di}if(e){var s=3Da.document.getEl=
ementById(b).contentWindow,
n=3Ds.document;if(!(n.body&&n.body.firstChild)){n.open();s.google_async_=
iframe_close=3Dg;n.write(c)}}else{var A=3Da.document.getElementById(b).c=
ontentWindow,q;e=3Dc;e=3DString(e);if(e.quote)q=3De.quote();else{s=3D['"=
'];for(n=3D0;n<e.length;n++){var o=3De.charAt(n),Ga=3Do.charCodeAt(0),ob=
=3Ds,pb=3Dn+1,ia;if(!(ia=3Dm[o])){var E;if(Ga>31&&Ga<127)E=3Do;else{var =
r=3Do;if(r in p)E=3Dp[r];else if(r in m)E=3Dp[r]=3Dm[r];else{var x=3Dr,y=
=3Dr.charCodeAt(0);if(y>31&&y<127)x=3Dr;else{if(y<256){x=3D"\\x";if(y<16=
||y>256)x+=3D"0"}else{x=3D"\\u";if(y<4096)x+=3D
"0"}x+=3Dy.toString(16).toUpperCase()}E=3Dp[r]=3Dx}}ia=3DE}ob[pb]=3Dia}s=
.push('"');q=3Ds.join("")}A.location.replace("javascript:"+q)}f=3Dg}catc=
h(vb){A=3DJa().google_jobrunner;Na(A)&&A.rl()}f&&(new Xa(a)).set(b,$a(a,=
b,c,i))}},ab=3Dfunction(){return va&&wa/va||typeof window.google_hash_ra=
tio=3D=3D"number"&&window.google_hash_ratio||h};window.google_loader_use=
d=3Dg;(function(a){if(!("google_onload_fired"in a)){a.google_onload_fire=
d=3Di;Ea(a,function(){a.google_onload_fired=3Dg})}})(window);if(!window.=
google_loader_experiment)window.google_loader_experiment=3DFa(["async1_a=
ll","block1"],ya)||Fa(["launch"],xa)||"none";var bb,cb=3Dwindow.google_l=
oader_experiment;
if(bb=3Dwindow.google_enable_async=3D=3D=3Dg||cb=3D=3D"launch"||cb=3D=3D=
"async1_all")bb=3Dwindow.google_enable_async=3D=3D=3Di?i:(D&&/MSIE 8/.te=
st(navigator.userAgent)||pa||oa&&!!window.document.body)&&!window.google=
_container_id&&(!window.google_ad_output||window.google_ad_output=3D=3D"=
html");
if(bb){var db=3Dwindow;if(db.google_unique_id)++db.google_unique_id;else=
 db.google_unique_id=3D1;for(var X=3Dwindow,_script$$inline_211=3D"scrip=
t",Y,Z=3D{allowtransparency:'"true"',frameborder:'"0"',height:'"'+X.goog=
le_ad_height+'"',hspace:'"0"',marginwidth:'"0"',marginheight:'"0"',onloa=
d:'"'+Ya+'"',scrolling:'"no"',vspace:'"0"',width:'"'+X.google_ad_width+'=
"'},eb=3DX.document,$=3DZ.id,fb=3D0;!$||X.document.getElementById($);)$=3D=
"aswift_"+fb++;Z.id=3D$;Z.name=3D$;eb.write(Ra(Z,X.google_ad_width,X.goo=
gle_ad_height));Y=3D
$;var gb;if(X.google_page_url)X.google_page_url=3DString(X.google_page_u=
rl);for(var hb=3D[],ib=3D0,jb=3DV.length;ib<jb;ib++){var kb=3DV[ib];if(X=
[kb]!=3Dh){var lb;try{var mb=3D[];Ua(new Sa,X[kb],mb);lb=3Dmb.join("")}c=
atch(nb){}lb&&Da(hb,kb,"=3D",lb,";")}}gb=3Dhb.join("");for(var qb=3D0,rb=
=3DV.length;qb<rb;qb++)X[V[qb]]=3Dh;var sb=3D(new Date).getTime(),tb=3Da=
b(),ub=3Dwindow.google_loader_experiment,wb=3D["<!doctype html><html><bo=
dy><",_script$$inline_211,">",gb,"google_show_ads_impl=3Dtrue;google_uni=
que_id=3D",X.google_unique_id,';google_async_iframe_id=3D"',
Y,'";google_start_time=3D',j,";",tb?"google_hash_ratio=3D"+tb+";":"",ub?=
'google_loader_experiment=3D"'+ub+'";':"","google_bpp=3D",sb>j?sb-j:1,";=
</",_script$$inline_211,">",Za(),"</body></html>"].join("");(X.document.=
getElementById(Y)?Pa:Qa)($a(X,Y,wb,g))}else{window.google_start_time=3Dj=
;window.google_hash_ratio=3Dab();document.write(Za())};})();

------------YjczpzKGc6gqRXEn2kKvZi
Content-Disposition: inline; filename=comments_bar2.jpg
Content-Type: image/jpeg; name=comments_bar2.jpg
Content-Location: http://www.flipcode.com/archives/comments_bar2.jpg
Content-Transfer-Encoding: Base64

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
V/6j5N4H7P79Z6D/2Q==

------------YjczpzKGc6gqRXEn2kKvZi
Content-Disposition: inline; filename=line_grey.png
Content-Type: image/png; name=line_grey.png
Content-Location: http://www.flipcode.com/archives/line_grey.png
Content-Transfer-Encoding: Base64

iVBORw0KGgoAAAANSUhEUgAAAgAAAAABCAIAAAAn2YEhAAAAa0lEQVR42r2TSxbA
IAgD5Yzc/yzpzkWtNQk82conGSQyc2wCwBBjV0K2WtMARIRXzuuXCg2Pn76MEa+n
Y5OJ7h8jKY+nxGR6zOtkJpAKfJLkMY3pU5nVuAhVknQmhoYLW1A/VeN1VM5NcvEA
ihzeJh4lSqAAAAAASUVORK5CYII=

------------YjczpzKGc6gqRXEn2kKvZi--
